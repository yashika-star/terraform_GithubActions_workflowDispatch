name: 'Terraform with workflow dispatch'

on:
  workflow_dispatch:
    inputs:
      region:
        type: choice
        description: AWS region selection
        options:
          - us-east-1
          - us-west-1
          - ap-south-1
 
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform with workflow dispatch'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # AWS credentials for terraform
    - name: AWS credentials
      uses: aws-actions/configure-aws-credentials@v1   
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: ap-south-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd module && terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: cd module && terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd module && terraform plan -input=false -var "region=${{ github.events.inputs.region }}"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: cd module && terraform apply -auto-approve -input=false -var "region=${{ github.events.inputs.region }}"
